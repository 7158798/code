
/**
* @Title: UserResolver.java
* @Package com.pay.card.api.resolver
* @Description: TODO(用一句话描述该文件做什么)
* @author jing.jin
* @date 2017年12月5日
* @version V1.0
*/

package com.pay.card.api.resolver;

import java.lang.annotation.Annotation;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.core.MethodParameter;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.support.WebArgumentResolver;
import org.springframework.web.bind.support.WebDataBinderFactory;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.method.support.HandlerMethodArgumentResolverComposite;
import org.springframework.web.method.support.ModelAndViewContainer;

import com.pay.card.interceptor.UserResolverInterceptor;
import com.pay.card.model.CreditBill;
import com.pay.card.model.CreditCard;
import com.pay.card.utils.LocalCacheUtil;

/**
 * @ClassName: UserResolver
 * @Description: TODO(这里用一句话描述这个类的作用)
 * @author jing.jin
 * @date 2017年12月5日
 *
 */

public class UserResolver extends HandlerMethodArgumentResolverComposite implements WebArgumentResolver {

    @Override
    public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer,
            NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {

        HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);

        String customerNo = request.getParameter("customerNo");
        String channel = request.getParameter("channel");
        String phoneNo = request.getParameter("phoneNo");
        Long userId = LocalCacheUtil.get(phoneNo, customerNo, channel);
        if (parameter.getParameterType().equals(CreditBill.class)) {
            // 账单
            CreditBill bill = new CreditBill();

            if (StringUtils.hasText(request.getParameter("cardId"))) {
                // 信用卡
                CreditCard card = new CreditCard();
                card.setId(new Long(request.getParameter("cardId")));
            }
            BeanUtils.populate(bill, request.getParameterMap());
            bill.setUserId(userId);
            return bill;
        } else if (parameter.getParameterType().equals(CreditCard.class)) {
            // 信用卡
            CreditCard card = new CreditCard();
            BeanUtils.populate(card, request.getParameterMap());
            card.setUserId(userId);
            return card;
        }

        return userId;
    }

    @Override
    public Object resolveArgument(MethodParameter methodParameter, NativeWebRequest webRequest) throws Exception {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public boolean supportsParameter(MethodParameter parameter) {
        Annotation[] AnnotationArray = parameter.getParameterAnnotations();

        boolean flag = parameter.getParameterAnnotation(UserResolverInterceptor.class) != null;
        return flag;
    }

}
