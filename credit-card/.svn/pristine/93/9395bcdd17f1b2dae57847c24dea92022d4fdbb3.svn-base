package com.pay.card.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;

import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.async.WebAsyncTask;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.pay.card.Constants;
import com.pay.card.enums.CodeEnum;
import com.pay.card.model.CreditBill;
import com.pay.card.model.CreditBillDetail;
import com.pay.card.model.CreditCard;
import com.pay.card.model.CreditUserInfo;
import com.pay.card.service.CreditBillService;
import com.pay.card.service.CreditCardService;
import com.pay.card.service.CreditUserInfoService;
import com.pay.card.utils.JedisUtil;
import com.pay.card.view.AnalysisResultView;
import com.pay.card.view.CreditBillView;
import com.pay.card.view.CreditCardView;
import com.pay.card.view.JsonResultView;
import com.pay.card.web.context.CardBuildContext;

@Api("信用卡账单 API")
@RestController
@RequestMapping("/api/v1/bill")
public class CreditBillController extends BaseController {

    @Autowired
    private CreditBillService creditBillService;
    @Autowired
    private CreditCardService creditCardService;
    @Autowired
    private CreditUserInfoService creditUserInfoService;
    @Autowired
    private RestTemplate restTemplate;

    @ApiOperation(value = "查询解析结果", httpMethod = HttpGet.METHOD_NAME, notes = "查询解析结果")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "jinjing_0316@outlook.com") })
    @RequestMapping(value = "/findAnalysisResult", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
                    WebAsyncTask<JsonResultView> findAnalysisResult(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {

            @SuppressWarnings("unchecked")
            @Override
            public JsonResultView call() throws Exception {
                CreditCard creditCard = new CreditCard();
                creditCard.setEmail(email);
                List<CreditCard> cardList = creditCardService.findCreditCardList(creditCard);
                if (cardList != null) {
                    // AnalysisBuildContext buildContext =
                    // analysisHelper.getAnalysisBuildContext();
                    //
                    // analysisHelper.getAnalysisModelBuilder().buildMulti(cardList,
                    // buildContext);
                    // List<AnalysisResultView> billViewList =
                    // analysisHelper.getViewMapper().map(cardList,
                    // buildContext);
                    //
                    // return new JsonResultView().setObject(billViewList);
                    CardBuildContext buildContext = apiHelper.getBuildContext2();
                    apiHelper.getModelBuilder().buildMulti(cardList, buildContext);
                    List<AnalysisResultView> billViewList = apiHelper.getOverrideViewMapper().map(cardList,
                                    buildContext);
                    return new JsonResultView().setObject(billViewList);
                } else {
                    return new JsonResultView().setObject(null);
                }

            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "查询账单的解析状态，是否完成,0000:解析成功 ,0001:解析失败,0003:解析中", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单的解析状态，是否完成,0000:解析成功 ,0001:解析失败,0003:解析中")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com") })
    @RequestMapping(value = "/findAnalysisStatus", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
                    WebAsyncTask<JsonResultView> findAnalysisStatus(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {
                Object status = JedisUtil.hashGet(Constants.REDIS_ANALYSIS_STATUS, email);
                return new JsonResultView(String.valueOf(status));
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    public WebAsyncTask<JsonResultView> findBillDetail(Long billId, String pageNumberStr, String billMonth) {
        if (pageNumberStr == null || "".equals(pageNumberStr)) {
            pageNumberStr = "1";
        }
        int pageNumber = Integer.parseInt(pageNumberStr);
        int pageSize = Constants.PAGE_SIZE;

        CreditBill creditBill = new CreditBill();
        creditBill.setId(billId);
        creditBill.setMonth(billMonth);

        // TODO
        List<CreditBillDetail> billDetails = creditBillService.findBillDetailList(creditBill, pageNumber, pageSize);

        return null;

    }

    /**
     * @Title: findBillIndex
     * @Description:查询账单首页的数据
     * @param cardId
     * @return WebAsyncTask<JsonResultView> 返回类型 @throws
     */
    @ApiOperation(value = "查询账单首页数据", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单首页数据")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "String", required = true, value = "信用卡id", defaultValue = "1") })
    @RequestMapping(value = "/findBillIndex", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
                    WebAsyncTask<JsonResultView> findBillIndex(Long cardId) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                Map map = new HashMap();

                CreditCard creditCard = new CreditCard();
                creditCard.setId(cardId);

                creditCard = creditCardService.findCreditCard(creditCard);
                logger.info("账单首页数据为:{}", JSON.toJSONString(creditCard));
                if (creditCard != null) {
                    CardBuildContext buildContext = apiHelper.getBuildContext();
                    apiHelper.getModelBuilder().buildSingle(creditCard, buildContext);
                    CreditCardView view = apiHelper.getViewMapper().map(creditCard, buildContext);
                    List<CreditBill> billList = creditCard.getBillList();
                    apiHelper.getModelBuilder().buildMulti(billList, buildContext);
                    List<CreditBillView> billViewList = apiHelper.getViewMapper().map(billList, buildContext);

                    map.put("card", view);
                    map.put("billList", billViewList);
                }
                logger.info("账单首页数据返回:{}", JSON.toJSONString(map));
                return new JsonResultView().setObject(map);

            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    /**
     * @Title: findBillList
     * @Description:查询账单状态
     * @param cardId
     * @return WebAsyncTask<JsonResultView> 返回类型 @throws
     */
    @ApiOperation(value = "查询账单列表", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单列表")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "String", required = true, value = "信用卡id", defaultValue = "1") })
    @RequestMapping(value = "/findBillList", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
                    WebAsyncTask<JsonResultView> findBillList(Long cardId) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                CreditBill creditBill = new CreditBill();
                CreditCard card = new CreditCard();
                card.setId(cardId);
                creditBill.setCard(card);
                List<CreditBill> billList = creditBillService.findCreditBillList(creditBill);

                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildMulti(billList, buildContext);
                List<CreditBillView> billViewList = apiHelper.getViewMapper().map(billList, buildContext);

                return new JsonResultView().setObject(billViewList);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "在邮箱解析的过程总获取解析得到的信用卡", httpMethod = HttpGet.METHOD_NAME, notes = "在邮箱解析的过程总获取解析得到的信用卡")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱", defaultValue = "jinjing_0316@outlook.com") })
    @RequestMapping(value = "/findCardList", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
                    WebAsyncTask<JsonResultView> findCardList(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                Object cardJson = JedisUtil.hashGet(Constants.REDIS_CARDS, email);
                JSONArray cardArray = null;
                if (cardJson != null) {
                    cardArray = JSONArray.parseArray(cardJson.toString());
                }
                return new JsonResultView().setObject(cardArray);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    /**
     * @Title: findLoginStatus
     * @Description:查询邮箱的登陆状态
     * @param email
     * @return WebAsyncTask<JsonResultView> 返回类型 @throws
     */
    @ApiOperation(value = "获取邮箱的登陆状态0000:登录成功 ,0001:登录失败,0003:登陆中", httpMethod = HttpGet.METHOD_NAME, notes = "获取邮箱的登陆状态0000:登录成功 ,0001:登录失败,0003:登陆中")
    @ApiImplicitParams({ @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com") })
    @RequestMapping(value = "/findLoginStatus", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
                    WebAsyncTask<JsonResultView> findLoginStatus(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {
                Object status = JedisUtil.hashGet(Constants.REDIS_LOGGIN_STATUS, email);
                return new JsonResultView(String.valueOf(status));
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @SuppressWarnings("rawtypes")
    @ApiOperation(value = "邮箱解析的入口", httpMethod = HttpGet.METHOD_NAME)
    @ApiImplicitParams({
                    @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
                    @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com"),
                    @ApiImplicitParam(paramType = "query", name = "password", dataType = "String", required = true, value = "邮箱密码", defaultValue = "123456"),
                    @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456"),
                    @ApiImplicitParam(paramType = "query", name = "interfaceCode", dataType = "String", required = true, value = "渠道标识", defaultValue = "1") })
    @RequestMapping(value = "/importBill", method = RequestMethod.GET)
    public
                    WebAsyncTask<JsonResultView> importBill(String customerNo, String phoneNo, String interfaceCode,
                                    String email, String password) {

        logger.info("邮件解析开始====================", customerNo);
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {
                CreditUserInfo creditUserInfo = new CreditUserInfo();
                creditUserInfo.setCreateDate(new Date());
                creditUserInfo.setCustomerNo(customerNo);
                creditUserInfo.setPhoneNo(phoneNo);
                creditUserInfo.setEmail(email);
                creditUserInfo.setInterfaceCode(interfaceCode);
                creditUserInfo.setStatus(1);
                Long id = creditUserInfoService.saveCreditUserInfo(creditUserInfo);

                // 设置初始状态
                JedisUtil.hashSet(Constants.REDIS_LOGGIN_STATUS, email, CodeEnum.PROCESSING.getCode());
                JedisUtil.hashSet(Constants.REDIS_CARDS, email, CodeEnum.PROCESSING.getCode());
                JedisUtil.hashSet(Constants.REDIS_ANALYSIS_STATUS, email, CodeEnum.PROCESSING.getCode());
                Thread.sleep(300000); // 假设是一些长时间任务
                String url = "http://localhost:8080/credit-card/card/findCardList";
                JSONArray json = restTemplate.getForEntity(url, JSONArray.class).getBody();
                return new JsonResultView();
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    /**
     * @Title: saveCreditCard
     * @Description:保存信用卡
     * @param creditBill
     * @return WebAsyncTask<JsonResultView<?>> 返回类型 @throws
     */
    @ApiOperation(value = "保存信用卡卡片", httpMethod = HttpPost.METHOD_NAME)
    @RequestMapping(value = "/saveCreditBill", method = RequestMethod.POST)
    public WebAsyncTask<JsonResultView<?>> saveCreditCard(@RequestBody CreditBill creditBill) {

        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView<?> call() throws Exception {
                return null;
            }
        };
        return new WebAsyncTask<JsonResultView<?>>(callable);
    }
}
