package com.pay.aile.bill.job;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.pay.aile.bill.contant.Constant;
import com.pay.aile.bill.entity.CreditEmail;
import com.pay.aile.bill.service.mail.download.DownloadMail;
import com.pay.aile.bill.utils.JedisClusterUtils;

/**
 *
 * @Description:
 * @see: CopyRelationScheduler 此处填写需要参考的类
 * @version 2017年12月7日 下午3:37:00
 * @author chao.wang
 */
@Service
public class CopyRelationScheduler {
    private static final Logger logger = LoggerFactory.getLogger(CopyRelationScheduler.class);

    private boolean stop = false;

    @Autowired
    private CopyRelationRedisJobHandle copyRelationRedisJobHandle;
    @Resource(name = "mailTaskExecutor")
    private ThreadPoolTaskExecutor taskExecutor;
    @Autowired
    private DownloadMail downloadMail;

    public void copyRelationLoop() {
        while (!stop) {
            CreditEmail creditEmail = copyRelationRedisJobHandle.getJob();
            if (creditEmail.getId() == null) {
                // 如果获取不到creditEmail 则任务已经删除
                continue;
            }
            String count = JedisClusterUtils.getString(Constant.REDIS_ANALYSIS_STATUS + creditEmail.getEmail());
            if (!StringUtils.hasText(count) || "0".equals(count)) {
                // 正在下载或解析邮件
                copyRelationRedisJobHandle.addJob(creditEmail);
                continue;
            }
            taskExecutor.execute(() -> {
                try {
                    logger.info("正在处理。。。。。。。。。。。。。。。。id:{}download email:{}", creditEmail.getId(),
                            creditEmail.getEmail());
                    downloadMail.copyRelation(creditEmail);
                } catch (Exception e) {
                    logger.warn("copyRelationLoop exception:{}", creditEmail);
                }
            });
        }
    }

    public void stop() {
        stop = true;
    }

}
