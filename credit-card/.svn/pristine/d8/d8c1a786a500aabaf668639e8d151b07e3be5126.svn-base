package com.pay.aile.bill.analyze.banktemplate;

import java.util.ArrayList;
import java.util.List;

import org.springframework.transaction.annotation.Transactional;

import com.pay.aile.bill.entity.CreditBill;
import com.pay.aile.bill.entity.CreditBillDetail;
import com.pay.aile.bill.entity.CreditBillDetailRelation;
import com.pay.aile.bill.entity.CreditCard;
import com.pay.aile.bill.entity.CreditUserBillRelation;
import com.pay.aile.bill.entity.CreditUserCardRelation;
import com.pay.aile.bill.entity.CreditUserEmailRelation;
import com.pay.aile.bill.enums.CardStatus;
import com.pay.aile.bill.model.AnalyzeParamsModel;

/**
 *
 * @Description:
 * @see: BaseBankSeparateTemplate 多账户分开还款账单类型基类
 *
 *       账单中抓取到的卡号与账单数量始终保持一致
 *
 *       账单中和账单明细中都存储有卡号字段,以标识自己属于哪一张卡
 *
 *       保存时就根据卡号区分账单明细与账单,账单与卡的关联关系
 *
 * @version 2017年12月1日 上午10:50:44
 * @author chao.wang
 */
public abstract class BaseBankSeparateTemplate extends BaseBankTemplate {
    @Transactional
    @Override
    protected void handleResultInternal(AnalyzeParamsModel apm) {
        Long emailId = apm.getEmailId();
        int year = 0;
        int month = 0;
        // 保存或更新卡信息
        List<CreditCard> cardList = apm.getResult().getCardList();
        cardList.forEach(c -> {
            c.setStatus(apm.getIsNew() ? CardStatus.NEW.value : CardStatus.AVAILABLE.value);
        });
        cardList = creditCardService.saveOrUpateCreditCard(cardList);
        // 保存账单
        List<CreditBill> billList = apm.getResult().getBillList();
        for (int i = 0; i < billList.size(); i++) {
            CreditBill bill = billList.get(i);
            bill.setCardId(cardList.get(i).getId());
            bill.setCardNumbers(cardList.get(i).getNumbers());
            bill.setEmailId(emailId);
            bill.setSentDate(apm.getSentDate());
            bill.setFileId(apm.getFileId());
            if (year == 0) {
                year = Integer.valueOf(bill.getYear());
            }
            if (month == 0) {
                month = Integer.valueOf(bill.getMonth());
            }
        }
        if (!billList.isEmpty()) {
            creditBillService.saveCreditBill(billList);
        }

        // 根据明细中的卡号和账单中的卡号进行对应
        List<CreditBillDetail> detailList = apm.getResult().getDetailList();
        List<CreditBillDetailRelation> relationList = new ArrayList<CreditBillDetailRelation>();

        if (!detailList.isEmpty()) {
            // 保存明细
            creditBillDetailService.batchSaveBillDetail(year, month, detailList);
            billList.forEach(bill -> {
                String cardNo = bill.getCardNumbers();
                detailList.stream().filter(e -> e.getCardNumbers().equals(cardNo)).forEach(detail -> {
                    CreditBillDetailRelation relation = new CreditBillDetailRelation();
                    relation.setBillId(bill.getId());
                    relation.setBillDetailId(detail.getId());
                    relationList.add(relation);
                });
            });
            // 保存账单和明细的关系
            creditBillDetailRelationService.batchSaveBillDetailRelation(year, month, relationList);
        }
        // 查询邮件和用户的关系
        List<CreditUserEmailRelation> emialRelationList = userEmailRelationMapper.findByEmail(emailId);

        // 保存账单和用户关系。
        List<CreditUserBillRelation> billRelationList = new ArrayList<CreditUserBillRelation>();
        billList.forEach(bill -> {
            emialRelationList.forEach(userEmail -> {
                CreditUserBillRelation billRelation = new CreditUserBillRelation();
                billRelation.setBillId(bill.getId());
                billRelation.setUserId(userEmail.getUserId());
                billRelationList.add(billRelation);
            });
        });
        userBillRelationMapper.batchInsert(billRelationList);

        // 卡片和用户的关系
        List<CreditUserCardRelation> cardRelationList = new ArrayList<CreditUserCardRelation>();
        // 保存卡片和用户关系

        for (CreditUserEmailRelation userEmail : emialRelationList) {
            cardList.forEach(card -> {
                CreditUserCardRelation cardRelation = new CreditUserCardRelation();
                cardRelation.setCardId(card.getId());
                cardRelation.setUserId(userEmail.getUserId());
                cardRelation.setStatus(apm.getIsNew() ? CardStatus.NEW.value : CardStatus.AVAILABLE.value);
                cardRelationList.add(cardRelation);
            });
        }
        // 保存
        userCardRelationMapper.batchInsert(cardRelationList);
    }

}
