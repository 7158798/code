package com.pay.card.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.time.LocalDate;
import java.time.Period;
import java.time.temporal.TemporalAdjusters;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.apache.http.client.methods.HttpGet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.async.WebAsyncTask;

import springfox.documentation.annotations.ApiIgnore;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.pay.card.Constants;
import com.pay.card.bean.CreditBillBean;
import com.pay.card.bean.CreditCardBean;
import com.pay.card.enums.CodeEnum;
import com.pay.card.enums.RedisStatusEnum;
import com.pay.card.interceptor.BillResolverInterceptor;
import com.pay.card.interceptor.CardResolverInterceptor;
import com.pay.card.model.CreditBill;
import com.pay.card.model.CreditBillDetail;
import com.pay.card.model.CreditCard;
import com.pay.card.model.CreditEmail;
import com.pay.card.model.CreditRepayment;
import com.pay.card.model.CreditUserEmailRelation;
import com.pay.card.model.CreditUserInfo;
import com.pay.card.service.CreditBillDetailService;
import com.pay.card.service.CreditBillService;
import com.pay.card.service.CreditCardService;
import com.pay.card.service.CreditRepaymentService;
import com.pay.card.service.CreditUserInfoService;
import com.pay.card.utils.JedisUtil;
import com.pay.card.view.AnalysisResultView;
import com.pay.card.view.CreditBillDetailView;
import com.pay.card.view.CreditBillView;
import com.pay.card.view.CreditCardView;
import com.pay.card.view.CreditRePayMentView;
import com.pay.card.view.JsonResultView;
import com.pay.card.web.annotation.RedisCacheInterceptor;
import com.pay.card.web.context.CardBuildContext;

@Api("信用卡账单 API")
@RestController
@RequestMapping("/api/v1/bill")
public class CreditBillController extends BaseController {

    public static final long loopIntervalSeconds = 180L;
    @Autowired
    private CreditBillService creditBillService;
    @Autowired
    private CreditCardService creditCardService;
    @Autowired
    private CreditUserInfoService creditUserInfoService;
    @Autowired
    private CreditBillDetailService creditBillDetailService;
    @Autowired
    private CreditRepaymentService creditRepaymentService;
    @Value("${billDownloadUrl}")
    private String billDownloadUrl = "";
    @Autowired
    private RestTemplate restTemplate;

    // @ApiOperation(value = "删除信用卡账单")
    // @ApiImplicitParams({
    // @ApiImplicitParam(paramType = "query", name = "billId", dataType =
    // "Long", required = true, value = "账单id", defaultValue = "2405"),
    // @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType =
    // "String", required = true, value = "手机号", defaultValue = "12345678900"),
    // @ApiImplicitParam(paramType = "query", name = "customerNo", dataType =
    // "String", required = true, value = "商户号", defaultValue = "8622632348"),
    // @ApiImplicitParam(paramType = "query", name = "channel", dataType =
    // "String", required = true, value = "渠道号", defaultValue = "1001") })
    @RequestMapping(value = "/deleteCreditBill", method = RequestMethod.GET)
    public WebAsyncTask<JsonResultView<?>> deleteCreditBill(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {

            @Override
            public JsonResultView<?> call() throws Exception {
                Map<String, String> map = new HashMap<String, String>();
                creditBillService.updateBillStatusById(creditBillBean.getBillId(), creditBillBean.getUserId());
                map.put("resCode", "0000");
                map.put("resMsg", "删除成功");
                return new JsonResultView<>().setObject(map);
            }
        };
        return new WebAsyncTask<JsonResultView<?>>(callable);
    }

    @ApiOperation(value = "查询解析结果", httpMethod = HttpGet.METHOD_NAME, notes = "查询解析结果")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "czb18518679659@126.com"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @RequestMapping(value = "/findAnalysisResult", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
            WebAsyncTask<JsonResultView> findAnalysisResult(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {

            @SuppressWarnings("unchecked")
            @Override
            public JsonResultView call() throws Exception {
                CreditCard creditCard = new CreditCard();
                creditCard.setEmail(creditBillBean.getEmail());
                creditCard.setUserId(creditBillBean.getUserId());

                logger.info("用户id【" + creditBillBean.getUserId() + "】查询解析结果请求参数:{},userId:{}", creditCard, creditBillBean.getUserId());
                List<CreditCard> cardList = creditCardService.findCreditCardList(creditCard);
                if (cardList != null) {
                    for (CreditCard creditCard2 : cardList) {
                        CreditBill creditBill = new CreditBill();
                        creditBill.setCard(creditCard2);
                        List<CreditBill> billList = creditBillService.findCreditBillList(creditBill);
                        creditCard2.setBillSize(billList.size());
                    }
                    logger.info("用户id为【" + creditBillBean.getUserId() + "】信用卡信息:{}", cardList);

                    // AnalysisBuildContext buildContext =
                    // analysisHelper.getAnalysisBuildContext();
                    //
                    // analysisHelper.getAnalysisModelBuilder().buildMulti(cardList,
                    // buildContext);
                    // List<AnalysisResultView> billViewList =
                    // analysisHelper.getViewMapper().map(cardList,
                    // buildContext);
                    //
                    // return new JsonResultView().setObject(billViewList);
                    CardBuildContext buildContext = apiHelper.getBuildContext2();
                    apiHelper.getModelBuilder().buildMulti(cardList, buildContext);
                    List<AnalysisResultView> billViewList = apiHelper.getOverrideViewMapper().map(cardList, buildContext);
                    return new JsonResultView().setObject(billViewList);
                } else {
                    return new JsonResultView().setObject(null);
                }

            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "查询账单的解析状态", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单的解析状态")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "czb18518679659@126.com"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @RequestMapping(value = "/findAnalysisStatus", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
            WebAsyncTask<JsonResultView> findAnalysisStatus(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {
                // 获取账单数量
                String billNumber = JedisUtil.getString(Constants.REDIS_ANALYSIS_STATUS + creditBillBean.getEmail());
                // 获取解析数量
                String analyzedNum = JedisUtil.getString(Constants.REDIS_ANALYZED_STATUS + creditBillBean.getEmail());
                // 解析的信用卡的列表
                Set<String> cardSet = JedisUtil.getMembers(Constants.REDIS_CARDS + creditBillBean.getEmail());

                JSONObject result = new JSONObject();
                result.put("billNumber", billNumber);
                result.put("analyzedNum", analyzedNum);
                result.put("cardList", cardSet);

                return new JsonResultView().setObject(result);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "查询账单日历", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单日历")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @RequestMapping(value = "/findBillCalendar", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    @RedisCacheInterceptor
    public
            WebAsyncTask<JsonResultView> findBillCalendar(@CardResolverInterceptor @ApiIgnore CreditCardBean creditCard,
                    HttpServletRequest req) {

        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                if (req.getAttribute("cacheValue") != null) {
                    JSONObject jsonObject = JSONObject.parseObject(req.getAttribute("cacheValue").toString());
                    return new JsonResultView<>().setObject(jsonObject);
                }
                JSONArray biillArray = creditBillService.findBillCalendar(creditCard);
                redisCache(biillArray, RedisStatusEnum.QUERY, "");
                return new JsonResultView().setObject(biillArray);

            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "获取账单详情")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "billId", dataType = "String", required = true, value = "账单id", defaultValue = "2404"),
            @ApiImplicitParam(paramType = "query", name = "yearMonth", dataType = "String", required = true, value = "账单年月", defaultValue = "2017_1"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @RequestMapping(value = "/findbillDetail", method = RequestMethod.GET)
    @RedisCacheInterceptor
    public
            WebAsyncTask<JsonResultView> findBillDetail(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean,
                    HttpServletRequest req) {
        @SuppressWarnings("rawtypes")
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {

            @SuppressWarnings("unchecked")
            @Override
            public JsonResultView call() throws Exception {

                if (req.getAttribute("cacheValue") != null) {
                    JSONObject jsonObject = JSONObject.parseObject(req.getAttribute("cacheValue").toString());
                    return new JsonResultView<>().setObject(jsonObject);
                }

                Map<String, Object> map = new HashMap<String, Object>();
                List<CreditBillDetailView> billDetailViewList = new ArrayList<CreditBillDetailView>();

                List<CreditBillDetail> billDetails = creditBillDetailService.findBillDetailList(creditBillBean.getBillId(),
                        creditBillBean.getUserId(), creditBillBean.getYearMonth());
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildSingle(billDetails, buildContext);
                billDetailViewList = apiHelper.getViewMapper().map(billDetails, buildContext);

                map.put("billDetailViewList", billDetailViewList);

                redisCache(map, RedisStatusEnum.QUERY, "");
                return new JsonResultView().setObject(map);
            }
        };

        return new WebAsyncTask<JsonResultView>(callable);

    }

    /**
     * @Title: findBillIndex
     * @Description:查询账单首页的数据
     * @param cardId
     * @return WebAsyncTask<JsonResultView> 返回类型 @throws
     */
    @ApiOperation(value = "查询账单首页数据", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单首页数据")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "String", required = true, value = "信用卡id", defaultValue = "2861") })
    @RequestMapping(value = "/findBillIndex", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    @RedisCacheInterceptor
    public
            WebAsyncTask<JsonResultView> findBillIndex(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean,
                    HttpServletRequest req) {

        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {

                if (req.getAttribute("cacheValue") != null) {
                    JSONObject jsonObject = JSONObject.parseObject(req.getAttribute("cacheValue").toString());
                    return new JsonResultView<>().setObject(jsonObject);
                }
                Map<String, Object> map = new HashMap<String, Object>();
                Map<String, Object> futureBillMap = new HashMap<String, Object>();
                List<CreditBillDetailView> billDetailViewList = new ArrayList<CreditBillDetailView>();

                CreditCard creditCard = new CreditCard();
                creditCard.setId(creditBillBean.getCardId());
                creditCard = creditCardService.findCreditCard(creditCard);
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildSingle(creditCard, buildContext);
                CreditCardView careView = apiHelper.getViewMapper().map(creditCard, buildContext);

                if (creditCard != null) {
                    // TODO
                    int sumAmount = 0;
                    sumAmount = creditBillDetailService.findFutureBillAmountCount(creditBillBean.getCardId(), creditBillBean.getUserId());

                    // 未出账单明细
                    List<CreditBillDetail> futureBillDetailList = creditBillDetailService.findFutureBillDetail(creditBillBean.getCardId(),
                            creditBillBean.getUserId());

                    buildContext = apiHelper.getBuildContext();
                    apiHelper.getModelBuilder().buildMulti(futureBillDetailList, buildContext);
                    List<CreditBillView> futureBillDetailViewList = apiHelper.getViewMapper().map(futureBillDetailList, buildContext);

                    // 还有n天出账单
                    int nextBillDays = getNextBillDays(creditCard);
                    futureBillMap.put("futureSumAmount", sumAmount);
                    futureBillMap.put("nextBillDays", nextBillDays);

                    // 账单列表
                    CreditBill creditBill = new CreditBill();
                    CreditCard card = new CreditCard();
                    card.setId(creditBillBean.getCardId());
                    creditBill.setCard(card);
                    creditBill.setUserId(creditBillBean.getUserId());
                    List<CreditBill> billList = creditBillService.findCreditBillList(creditBill);

                    buildContext = apiHelper.getBuildContext();
                    apiHelper.getModelBuilder().buildMulti(billList, buildContext);
                    List<CreditBillView> billViewList = apiHelper.getViewMapper().map(billList, buildContext);
                    // 最新一期账单明细
                    if (CollectionUtils.isNotEmpty(billList)) {
                        Long billId = billViewList.get(0).getId();
                        String year = billViewList.get(0).getYear();
                        String method = billViewList.get(0).getMonth();
                        List<CreditBillDetail> billDetails = creditBillDetailService.findBillDetailList(billId, creditBillBean.getUserId(),
                                year + "_" + method);
                        apiHelper.getModelBuilder().buildSingle(billDetails, buildContext);
                        billDetailViewList = apiHelper.getViewMapper().map(billDetails, buildContext);
                    }
                    map.put("cardView", careView);
                    map.put("futureBillView", futureBillMap);
                    map.put("futureBillDetailViewList", futureBillDetailViewList);
                    map.put("billViewList", billViewList);
                    map.put("billDetailViewList", billDetailViewList);
                    redisCache(map, RedisStatusEnum.QUERY, "");

                }
                return new JsonResultView().setObject(map);
            }

        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    /**
     * @Title: findBillList
     * @Description:查询账单状态
     * @param cardId
     * @return WebAsyncTask<JsonResultView> 返回类型 @throws
     */
    @ApiOperation(value = "查询账单列表", httpMethod = HttpGet.METHOD_NAME, notes = "查询账单列表")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "String", required = true, value = "信用卡id", defaultValue = "1"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @RequestMapping(value = "/findBillList", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    @RedisCacheInterceptor
    public
            WebAsyncTask<JsonResultView> findBillList(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean,
                    HttpServletRequest req) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                if (req.getAttribute("cacheValue") != null) {
                    JSONObject jsonObject = JSONObject.parseObject(req.getAttribute("cacheValue").toString());
                    return new JsonResultView<>().setObject(jsonObject);
                }

                CreditBill creditBill = new CreditBill();
                CreditCard card = new CreditCard();
                card.setId(creditBillBean.getCardId());
                creditBill.setCard(card);
                creditBill.setUserId(creditBillBean.getUserId());
                List<CreditBill> billList = creditBillService.findCreditBillList(creditBill);

                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildMulti(billList, buildContext);
                List<CreditBillView> billViewList = apiHelper.getViewMapper().map(billList, buildContext);
                // redisCache(billViewList, RedisStatusEnum.QUERY, "");

                return new JsonResultView().setObject(billViewList);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @SuppressWarnings("rawtypes")
    @ApiOperation(value = "获取信用卡详情")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "billId", dataType = "String", required = true, value = "账单id", defaultValue = "2404"),
            @ApiImplicitParam(paramType = "query", name = "yearMonth", dataType = "String", required = true, value = "账单年月", defaultValue = "2017_1"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "String", required = true, value = "银行卡Id", defaultValue = "123456789") })
    @RequestMapping(value = "/findCardDetail", method = RequestMethod.GET)
    @RedisCacheInterceptor
    public
            WebAsyncTask<JsonResultView> findCardDetail(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean,
                    HttpServletRequest req) {

        Callable<JsonResultView> callable = new Callable<JsonResultView>() {

            @SuppressWarnings("unchecked")
            @Override
            public JsonResultView call() throws Exception {

                if (req.getAttribute("cacheValue") != null) {
                    JSONObject jsonObject = JSONObject.parseObject(req.getAttribute("cacheValue").toString());
                    return new JsonResultView<>().setObject(jsonObject);
                }
                Map<String, Object> map = new HashMap<String, Object>();
                Map<String, Object> futureBillMap = new HashMap<String, Object>();
                List<CreditBillDetailView> billDetailViewList = new ArrayList<CreditBillDetailView>();

                CreditCard creditCard = new CreditCard();
                creditCard.setId(creditBillBean.getCardId());
                creditCard = creditCardService.findCreditCard(creditCard);
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildSingle(creditCard, buildContext);
                CreditCardView careView = apiHelper.getViewMapper().map(creditCard, buildContext);

                if (creditCard != null) {
                    // TODO
                    int sumAmount = 0;
                    sumAmount = creditBillDetailService.findFutureBillAmountCount(creditBillBean.getCardId(), creditBillBean.getUserId());

                    // 未出账单明细
                    List<CreditBillDetail> futureBillDetailList = creditBillDetailService.findFutureBillDetail(creditBillBean.getCardId(),
                            creditBillBean.getUserId());

                    buildContext = apiHelper.getBuildContext();
                    apiHelper.getModelBuilder().buildMulti(futureBillDetailList, buildContext);
                    List<CreditBillView> futureBillDetailViewList = apiHelper.getViewMapper().map(futureBillDetailList, buildContext);

                    // 还有n天出账单
                    int nextBillDays = getNextBillDays(creditCard);
                    futureBillMap.put("futureSumAmount", sumAmount);
                    futureBillMap.put("nextBillDays", nextBillDays);

                    // 账单列表
                    CreditBill creditBill = new CreditBill();
                    CreditCard card = new CreditCard();
                    card.setId(creditBillBean.getCardId());
                    creditBill.setCard(card);
                    creditBill.setUserId(creditBillBean.getUserId());
                    List<CreditBill> billList = creditBillService.findCreditBillList(creditBill);

                    buildContext = apiHelper.getBuildContext();
                    apiHelper.getModelBuilder().buildMulti(billList, buildContext);
                    List<CreditBillView> billViewList = apiHelper.getViewMapper().map(billList, buildContext);
                    // 最新一期账单明细
                    if (CollectionUtils.isNotEmpty(billList)) {
                        Long billId = billViewList.get(0).getId();
                        String year = billViewList.get(0).getYear();
                        String method = billViewList.get(0).getMonth();
                        List<CreditBillDetail> billDetails = creditBillDetailService.findBillDetailList(billId, creditBillBean.getUserId(),
                                year + "_" + method);
                        apiHelper.getModelBuilder().buildSingle(billDetails, buildContext);
                        billDetailViewList = apiHelper.getViewMapper().map(billDetails, buildContext);
                    }
                    map.put("cardView", careView);
                    map.put("futureBillView", futureBillMap);
                    map.put("futureBillDetailViewList", futureBillDetailViewList);
                    map.put("billViewList", billViewList);
                    map.put("billDetailViewList", billDetailViewList);
                    redisCache(map, RedisStatusEnum.QUERY, "");
                }

                return new JsonResultView().setObject(map);
            }
        };

        return new WebAsyncTask<JsonResultView>(callable);

    }

    // @ApiOperation(value = "在邮箱解析的过程总获取解析得到的信用卡", httpMethod =
    // HttpGet.METHOD_NAME, notes = "在邮箱解析的过程总获取解析得到的信用卡")
    // @ApiImplicitParams({
    // @ApiImplicitParam(paramType = "query", name = "email", dataType =
    // "String", required = true, value = "邮箱", defaultValue =
    // "jinjing_0316@outlook.com"),
    // @ApiImplicitParam(paramType = "query", name = "channel", dataType =
    // "String", required = true, value = "渠道", defaultValue = "1001"),
    // @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType =
    // "String", required = true, value = "商户手机号", defaultValue = "123456789")
    // })
    // @RequestMapping(value = "/findCardList", method = RequestMethod.GET)
    // @SuppressWarnings("rawtypes")
    // public WebAsyncTask<JsonResultView> findCardList(
    // @BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
    // Callable<JsonResultView> callable = new Callable<JsonResultView>() {
    // @Override
    // @SuppressWarnings("unchecked")
    // public JsonResultView call() throws Exception {
    //
    // String cardArray = JedisUtil.getString(Constants.REDIS_CARDS +
    // creditBillBean.getEmail());
    // return new JsonResultView().setObject(cardArray);
    // }
    // };
    // return new WebAsyncTask<JsonResultView>(callable);
    // }

    // /**
    // * @Title: findLoginStatus
    // * @Description:查询邮箱的登陆状态
    // * @param email
    // * @return WebAsyncTask<JsonResultView> 返回类型 @throws
    // */
    // @ApiOperation(value = "获取邮箱的登陆状态0000:登录成功 ,0001:登录失败,0003:登陆中",
    // httpMethod = HttpGet.METHOD_NAME, notes = "获取邮箱的登陆状态0000:登录成功
    // ,0001:登录失败,0003:登陆中")
    // @ApiImplicitParams({
    // @ApiImplicitParam(paramType = "query", name = "email", dataType =
    // "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com")
    // })
    // @RequestMapping(value = "/findLoginStatus", method = RequestMethod.GET)
    // @SuppressWarnings("rawtypes")
    // public WebAsyncTask<JsonResultView> findLoginStatus(
    // @BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
    // Callable<JsonResultView> callable = new Callable<JsonResultView>() {
    // @Override
    // public JsonResultView call() throws Exception {
    // Object status = JedisUtil.hashGet(Constants.REDIS_LOGGIN_STATUS,
    // creditBillBean.getEmail());
    // return new JsonResultView(String.valueOf(status));
    // }
    // };
    // return new WebAsyncTask<JsonResultView>(callable);
    // }

    @ApiOperation(value = "查询邮箱的刷新状态", httpMethod = HttpGet.METHOD_NAME, notes = "查询邮箱的刷新状态")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @RequestMapping(value = "/findRefreshStatus", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
            WebAsyncTask<JsonResultView> findRefreshStatus(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {

                List<CreditEmail> emailList = creditBillService.findEmailByUser(creditBillBean.getUserId());
                logger.info("emailList============={}", JSONObject.toJSONString(emailList));
                int billNumberSum = 0;
                int analyzedNumSum = 0;

                List<String> billNumberList = new ArrayList<String>();
                List<String> analyzedNumList = new ArrayList<String>();
                // 构建查询的list
                for (CreditEmail email : emailList) {
                    billNumberList.add(Constants.REDIS_ANALYSIS_STATUS + email.getEmail());
                    analyzedNumList.add(Constants.REDIS_ANALYZED_STATUS + email.getEmail());
                }
                logger.info("billNumberList============={}", JSONObject.toJSONString(billNumberList));
                logger.info("analyzedNumList============={}", JSONObject.toJSONString(analyzedNumList));
                // 获取下载数量
                billNumberList = JedisUtil.multiGetString(billNumberList);
                // 获取解析数量
                analyzedNumList = JedisUtil.multiGetString(analyzedNumList);
                // 累加下载数量
                for (String value : billNumberList) {
                    if (StringUtils.hasText(value)) {
                        billNumberSum = billNumberSum + Integer.parseInt(value);
                    }

                }
                // 累加解析数量
                for (String value : analyzedNumList) {
                    if (StringUtils.hasText(value)) {
                        analyzedNumSum = analyzedNumSum + Integer.parseInt(value);
                    }

                }
                logger.info("billNumber============={}", billNumberSum);
                logger.info("analyzedNumSum============={}", analyzedNumSum);
                // 构建结果返回
                JSONObject result = new JSONObject();
                result.put("billNumber", billNumberSum);
                result.put("analyzedNum", analyzedNumSum);

                return new JsonResultView().setObject(result);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "查询还款记录", httpMethod = HttpGet.METHOD_NAME)
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "billId", dataType = "Long", required = true, value = "账单id", defaultValue = "3070"),
            @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "Long", required = true, value = "信用卡id", defaultValue = "3070"),
            @ApiImplicitParam(paramType = "query", name = "year", dataType = "String", required = true, value = "还款年", defaultValue = "2017"),
            @ApiImplicitParam(paramType = "query", name = "month", dataType = "String", required = true, value = "还款月", defaultValue = "12"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "手机号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道号", defaultValue = "1001") })
    @RequestMapping("/findRePaymentDetail")
    @RedisCacheInterceptor
    public
            WebAsyncTask<JsonResultView<?>> findRePaymentDetail(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean,
                    HttpServletRequest req) {
        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {

            @SuppressWarnings("unchecked")
            @Override
            public JsonResultView<?> call() throws Exception {
                if (req.getAttribute("cacheValue") != null) {
                    JSONObject jsonObject = JSONObject.parseObject(req.getAttribute("cacheValue").toString());
                    return new JsonResultView<>().setObject(jsonObject);
                }

                CreditRepayment creditRepayment = new CreditRepayment();
                CreditBill creditBill = new CreditBill();
                CreditUserInfo creditUserInfo = new CreditUserInfo();

                creditUserInfo.setId(creditBillBean.getUserId());
                creditBill.setId(creditBillBean.getBillId());
                creditRepayment.setBill(creditBill);
                creditRepayment.setUserInfo(creditUserInfo);
                List<CreditRepayment> rePaymentList = creditRepaymentService.findRepaymentList(creditRepayment);
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildMulti(rePaymentList, buildContext);
                List<CreditRePayMentView> rePayMentViewViewList = apiHelper.getViewMapper().map(rePaymentList, buildContext);

                redisCache(rePayMentViewViewList, RedisStatusEnum.QUERY, "");

                return new JsonResultView().setObject(rePayMentViewViewList);
            }
        };

        return new WebAsyncTask<JsonResultView<?>>(callable);
    }

    @ApiOperation(value = "查询解析结果", httpMethod = HttpGet.METHOD_NAME, notes = "查询解析结果")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "jinjing_0316@outlook.com"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "手机号", defaultValue = "12345678900"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户号", defaultValue = "8622632348"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道号", defaultValue = "1001") })
    @RequestMapping(value = "/findUpdateResult", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
            WebAsyncTask<JsonResultView> findUpdateResult(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {

            @SuppressWarnings("unchecked")
            @Override
            public JsonResultView call() throws Exception {
                CreditCard creditCard = new CreditCard();
                creditCard.setEmail(creditBillBean.getEmail());
                List<CreditCard> cardList = creditCardService.findCreditCardList(creditCard);
                if (cardList != null) {
                    // AnalysisBuildContext buildContext =
                    // analysisHelper.getAnalysisBuildContext();
                    //
                    // analysisHelper.getAnalysisModelBuilder().buildMulti(cardList,
                    // buildContext);
                    // List<AnalysisResultView> billViewList =
                    // analysisHelper.getViewMapper().map(cardList,
                    // buildContext);
                    //
                    // return new JsonResultView().setObject(billViewList);
                    CardBuildContext buildContext = apiHelper.getBuildContext2();
                    apiHelper.getModelBuilder().buildMulti(cardList, buildContext);
                    List<AnalysisResultView> billViewList = apiHelper.getOverrideViewMapper().map(cardList, buildContext);
                    return new JsonResultView().setObject(billViewList);
                } else {
                    return new JsonResultView().setObject(null);
                }

            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    /**
     * @Title: getNextBillDays
     * @Description: 还有n天出账单
     * @param
     * @return
     */
    private int getNextBillDays(CreditCard creditCard) {
        int nextBillDays = 0;
        LocalDate today = LocalDate.now();
        LocalDate lastDay = today.with(TemporalAdjusters.lastDayOfMonth());
        Period p = Period.between(today, lastDay);
        nextBillDays = p.getDays() + Integer.valueOf(creditCard.getBillDay());

        return nextBillDays;
    }

    @ApiOperation(value = "导入邮箱的账单", httpMethod = HttpGet.METHOD_NAME, notes = "导入邮箱的账单")
    @SuppressWarnings("rawtypes")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com"),
            @ApiImplicitParam(paramType = "query", name = "password", dataType = "String", required = true, value = "邮箱密码", defaultValue = "123456"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道标识", defaultValue = "1001") })
    @RequestMapping(value = "/importBill", method = RequestMethod.GET)
    public
            WebAsyncTask<JsonResultView> importBill(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {

        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {

                // 设置初始状态

                // String url =
                // "http://localhost:8080/credit-card/card/findCardList";
                try {
                    String url = billDownloadUrl + "/getEmailBill?email=%s&password=%s&userId=%s";

                    url = String.format(url, creditBillBean.getEmail(), creditBillBean.getPassword(), creditBillBean.getUserId());

                    logger.info("url=================={}", url);
                    JSONObject json = restTemplate.getForEntity(url, JSONObject.class).getBody();
                    JsonResultView view = new JsonResultView();
                    view.setCode(json.getString("code"));
                    view.setMsg(json.getString("msg"));
                    return view;
                } catch (Exception e) {
                    logger.error(e.getMessage());
                    return new JsonResultView(CodeEnum.FAIL);
                }
                // return json.toJavaObject(JsonResultView.class);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "保存其他邮箱", httpMethod = HttpGet.METHOD_NAME, notes = "保存其他邮箱")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱帐号", defaultValue = "xxx@qq.com"),
            @ApiImplicitParam(paramType = "query", name = "password", dataType = "String", required = true, value = "邮箱密码", defaultValue = "12345656"),
            @ApiImplicitParam(paramType = "query", name = "server", dataType = "String", required = true, value = "服务器", defaultValue = "pop.example.com"),
            @ApiImplicitParam(paramType = "query", name = "port", dataType = "String", required = true, value = "端口", defaultValue = "110"),
            @ApiImplicitParam(paramType = "query", name = "ssl", dataType = "String", required = true, value = "0 不需要 1 需要", defaultValue = "0") })
    @RequestMapping(value = "/importOtherEmail", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public
            WebAsyncTask<JsonResultView> importOtherEmail(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean,
                    @ApiIgnore CreditUserEmailRelation relation) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {

            @Override
            public JsonResultView call() throws Exception {

                // 设置初始状态

                // String url =
                // "http://localhost:8080/credit-card/card/findCardList";
                String url = billDownloadUrl + "/getOtherEmailBill?email=%s&password=%s&userId=%s&server=%s&posr=%d&ssl=%d";

                url = String.format(url, creditBillBean.getEmail(), creditBillBean.getPassword(), creditBillBean.getUserId(),
                        relation.getServer(), relation.getPort(), relation.getSsl());

                logger.info("url=================={}", url);
                JSONObject json = restTemplate.getForEntity(url, JSONObject.class).getBody();
                JsonResultView view = new JsonResultView();
                view.setCode(json.getString("code"));
                view.setMsg(json.getString("msg"));
                return view;
                // return json.toJavaObject(JsonResultView.class);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiOperation(value = "刷新信用卡账单")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "手机号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道号", defaultValue = "1001") })
    @RequestMapping(value = "/refreshCreditBill", method = RequestMethod.GET)
    public
            WebAsyncTask<JsonResultView<?>> refreshCreditBill(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {
        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {

            @Override
            public JsonResultView<?> call() throws Exception {
                // List<CreditEmail> emailList =
                // creditBillService.findEmailByUser(creditBillBean.getUserId());
                String url = billDownloadUrl + "/updateBill?userId=" + creditBillBean.getUserId();

                JSONObject result = restTemplate.getForEntity(url, JSONObject.class).getBody();
                return new JsonResultView().setObject(result);
                // return JSONObject.toJavaObject(result, JsonResultView.class);
            }
        };
        return new WebAsyncTask<JsonResultView<?>>(callable);
    }

    @ApiOperation(value = "再次导入邮箱的账单", httpMethod = HttpGet.METHOD_NAME, notes = "再次导入邮箱的账单")
    @SuppressWarnings("rawtypes")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "emailId", dataType = "String", required = true, value = "邮箱id", defaultValue = "xxx@qq.com"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道标识", defaultValue = "1") })
    @RequestMapping(value = "/repeatImportBill", method = RequestMethod.GET)
    public
            WebAsyncTask<JsonResultView> repeatImportBill(@BillResolverInterceptor @ApiIgnore CreditBillBean creditBillBean) {

        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {

                // 设置初始状态

                // String url =
                // "http://localhost:8080/credit-card/card/findCardList";
                String url = billDownloadUrl + "/getEmailBill?email=%s&password=%s&userId=%s";

                url = String.format(url, creditBillBean.getEmail(), creditBillBean.getPassword(), creditBillBean.getUserId());

                logger.info("url=================={}", url);
                JSONObject json = restTemplate.getForEntity(url, JSONObject.class).getBody();

                return json.toJavaObject(JsonResultView.class);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

}
