package com.pay.aile.bill.analyze.banktemplate.pab;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.pay.aile.bill.entity.CreditBill;
import com.pay.aile.bill.entity.CreditBillDetail;
import com.pay.aile.bill.entity.CreditBillDetailRelation;
import com.pay.aile.bill.entity.CreditCard;
import com.pay.aile.bill.entity.CreditTemplate;
import com.pay.aile.bill.enums.CardTypeEnum;
import com.pay.aile.bill.model.AnalyzeParamsModel;

/**
 *
 * @author Charlie
 * @description 平安银行解析模板
 */
@Service
public class PABTemplate extends AbstractPABTemplate {

    @Override
    public void initRules() {
        super.initRules();
        if (rules == null) {
            rules = new CreditTemplate();
            rules.setCardtypeId(18L);
            rules.setCardholder("尊敬的[\\u4e00-\\u9fa5]+");
            rules.setYearMonth("本期账单日 \\d{4}-\\d{2}-\\d{2}");
            rules.setCardNumbers("\\*+\\d{4}");
            rules.setBillDay("本期账单日 \\d{4}-\\d{2}-\\d{2}");
            rules.setDueDate("本期还款日 \\d{4}-\\d{2}-\\d{2}");
            rules.setCredits("信用额度 \\d+\\.?\\d*");
            rules.setCash("取现额度 \\d+\\.?\\d*");
            rules.setCurrentAmount("本期最低应还金额 \\d+\\.?\\d*");
            rules.setMinimum("本期最低应还金额 \\d+\\.?\\d* \\S+\\d+\\.?\\d* \\d+\\.?\\d*");
            rules.setDetails("\\d{4}-\\d{2}-\\d{2} \\d{4}-\\d{2}-\\d{2} \\S+ -?\\d+\\.?\\d*");
            rules.setIntegral("查看积分详情 \\^|&\\S+ \\d+");
            rules.setTransactionDate("0");
            rules.setBillingDate("1");
            rules.setTransactionDescription("2");
            rules.setTransactionAmount("3");
        }
    }

    @Transactional
    @Override
    protected void handleResultInternal(AnalyzeParamsModel apm) {
        Long emailId = apm.getEmailId();
        int month = 0;
        List<CreditCard> cardList = apm.getResult().getCardList();
        List<CreditBill> billList = apm.getResult().getBillList();
        List<CreditBillDetail> detailList = apm.getResult().getDetailList();
        CreditCard saveCard = null;
        CreditBill saveBill = null;
        // 根据明细中出现的卡号的数量最多的选出一个卡号进行保存
        if (!cardList.isEmpty()) {
            saveCard = cardList.get(0);
        }
        if (!billList.isEmpty()) {
            saveBill = billList.get(0);
        }
        // 保存或更新卡信息
        creditCardService.saveOrUpdateUnionCreditCard(saveCard);
        // 保存账单
        saveBill.setCardId(saveCard.getId());
        saveBill.setEmailId(emailId);
        saveBill.setSentDate(apm.getSentDate());
        month = Integer.valueOf(saveBill.getMonth());
        creditBillService.saveCreditBill(saveBill);
        // 保存明细
        if (!detailList.isEmpty()) {
            creditBillDetailService.batchSaveBillDetail(month, detailList);
        }
        // 保存账单和明细的关系
        List<CreditBillDetailRelation> relationList = new ArrayList<CreditBillDetailRelation>();

        billList.forEach(bill -> {
            detailList.forEach(detail -> {
                CreditBillDetailRelation relation = new CreditBillDetailRelation();
                relation.setBillId(bill.getId());
                relation.setBillDetailId(detail.getId());
                relationList.add(relation);
            });
        });
        creditBillDetailRelationService.batchSaveBillDetailRelation(month, relationList);
    }

    @Override
    protected void setCardType() {
        cardType = CardTypeEnum.PAB_DEFAULT;
    }

}
