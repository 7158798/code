package com.pay.card.web.interceptor;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.util.StringUtils;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import com.pay.card.utils.LocalCacheUtil;
import com.pay.card.utils.MD5Util;
import com.pay.card.utils.MethodInterceptorUtils;
import com.pay.card.web.annotation.RedisCacheInterceptor;
import com.pay.card.web.context.RedisRequestContext;

public class RedisInterceptor implements HandlerInterceptor {

    @Override
    public void afterCompletion(HttpServletRequest req, HttpServletResponse res, Object handler, Exception arg3)
                    throws Exception {
        RedisCacheInterceptor redisCacheInterceptor = MethodInterceptorUtils.getAnnotaion(handler,
                        RedisCacheInterceptor.class);
        if (redisCacheInterceptor != null) {

            ServletOutputStream out = res.getOutputStream();
            byte flush[] = new byte[1024];
            int len = 0;
            out.write(flush, 0, len);

        }

    }

    @Override
    public void postHandle(HttpServletRequest req, HttpServletResponse res, Object handler, ModelAndView arg3)
                    throws Exception {
        // TODO Auto-generated method stub

    }

    @Override
    public boolean preHandle(HttpServletRequest req, HttpServletResponse res, Object handler) throws Exception {

        RedisCacheInterceptor redisCacheInterceptor = MethodInterceptorUtils.getAnnotaion(handler,
                        RedisCacheInterceptor.class);
        if (redisCacheInterceptor != null) {
            String key = req.getRequestURI() + req.getQueryString();
            key = MD5Util.MD5Encode(key, "UTF-8");
            String str = (String) LocalCacheUtil.get(key);
            // String str = JedisUtil.getString(key);
            if (StringUtils.hasText(str)) {
                RedisRequestContext.setRequestContext("redisValue", str);
                return true;
            } else {
                return true;
            }
        }

        return false;
    }

}
