package com.pay.card.api;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.apache.http.client.methods.HttpPost;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.context.request.async.WebAsyncTask;

import com.alibaba.fastjson.JSON;
import com.pay.card.model.CreditCard;
import com.pay.card.service.CreditCardService;
import com.pay.card.view.CreditCardView;
import com.pay.card.view.JsonResultView;
import com.pay.card.web.context.CardBuildContext;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@Api("信用卡卡片  API")
@RestController
@RequestMapping("/api/v1/card")
public class CreditCardController extends BaseController {
    @Autowired
    private CreditCardService creditCardService;

    @ApiOperation(value = "获取信用卡首页数据", notes = "获取推荐卡和信用卡首页列表信息")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })

    @ApiResponses({ @ApiResponse(code = 400, message = "请求参数没填好"),
            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对") })
    @RequestMapping(value = "/findCardIndex", method = RequestMethod.GET)
    public WebAsyncTask<JsonResultView<?>> findCardIndex(String customerNo, String phoneNo) {
        CreditCard creditCard = new CreditCard();
        creditCard.setCustomerNo(customerNo);
        creditCard.setPhoneNo(phoneNo);
        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {
            @Override
            public JsonResultView<?> call() throws Exception {
                List<CreditCard> list = creditCardService.findCreditCardList(creditCard);
                logger.info("商户编号【" + customerNo + "】信用卡首页数据:{}", JSON.toJSONString(list));
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildMulti(list, buildContext);
                List<CreditCardView> viewList = apiHelper.getViewMapper().map(list, buildContext);
                logger.info("CreditCardViewList:{}", JSON.toJSONString(viewList));
                CreditCardView recommendCard = getRecommendCard(viewList);
                Map<String, Object> indexMap = new HashMap<String, Object>();
                indexMap.put("cardList", viewList);
                indexMap.put("recommendCard", recommendCard);
                return new JsonResultView<>().setObject(indexMap);
            }
        };
        return new WebAsyncTask<JsonResultView<?>>(callable);
    }

    @ApiOperation(value = "获取推荐信用", notes = "获取信用卡列表信息")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "channel", dataType = "String", required = true, value = "渠道", defaultValue = "1001"),
            @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789") })
    @ApiResponses({ @ApiResponse(code = 400, message = "请求参数没填好"),
            @ApiResponse(code = 404, message = "请求路径没有或页面跳转路径不对") })
    @RequestMapping(value = "/findRecommendCardList", method = RequestMethod.GET)
    public WebAsyncTask<JsonResultView<?>> findRecommendCardList(String customerNo, String phoneNo) {
        CreditCard creditCard = new CreditCard();
        creditCard.setCustomerNo(customerNo);
        creditCard.setPhoneNo(phoneNo);

        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {
            @Override
            public JsonResultView<?> call() throws Exception {
                List<CreditCard> list = creditCardService.findCreditCardList(creditCard);
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildMulti(list, buildContext);
                List<CreditCardView> viewList = apiHelper.getViewMapper().map(list, buildContext);
                viewList = getRecommendCardList(viewList);
                return new JsonResultView<>().setObject(viewList);
            }
        };
        return new WebAsyncTask<JsonResultView<?>>(callable);
    }

    @ApiOperation(value = "保存信用卡卡片", httpMethod = HttpPost.METHOD_NAME)
    @RequestMapping(value = "/saveCreditCard", method = RequestMethod.POST)
    public WebAsyncTask<JsonResultView<?>> saveCreditCard(@RequestBody CreditCard creditCard) {
        CreditCard card = creditCard;
        Callable<JsonResultView<?>> callable = new Callable<JsonResultView<?>>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView<?> call() throws Exception {
                CreditCard creditCard = creditCardService.saveOrUpdateCreditCard(card);
                return new JsonResultView<>().setObject(creditCard);
            }
        };
        return new WebAsyncTask<JsonResultView<?>>(callable);
    }

    /**
     * @Title: findRecommendCard
     * @Description:查找推荐卡
     * @param list
     * @param @return
     *            参数 @return CreditCardView 返回类型 @throws
     */
    private CreditCardView getRecommendCard(List<CreditCardView> list) {

        list = list.stream()
                .filter((card) -> ((card.getCredits().doubleValue() - card.getBillAmount().doubleValue()
                        - card.getConsumption().doubleValue() + card.getRepayment().doubleValue())
                        / card.getCredits().doubleValue() > 0.2))
                .sorted((CreditCardView o1, CreditCardView o2) -> o1.getFreeInterestPeriod().intValue()
                        - o2.getFreeInterestPeriod().intValue())
                .collect(Collectors.toList());
        List<CreditCardView> recommendList = getRecommendCardList(list);
        if (CollectionUtils.isNotEmpty(recommendList)) {
            return recommendList.get(0);
        }

        return null;
    }

    /**
     * @Title: getRecommendCardList
     * @Description:获取推荐用卡
     * @param list
     * @param @return
     *            参数 @return List<CreditCardView> 返回类型 @throws
     */
    private List<CreditCardView> getRecommendCardList(List<CreditCardView> list) {

        list = list.stream()
                .filter((card) -> ((card.getCredits().doubleValue() - card.getBillAmount().doubleValue()
                        - card.getConsumption().doubleValue() + card.getRepayment().doubleValue())
                        / card.getCredits().doubleValue() > 0.2))
                .sorted((CreditCardView o1, CreditCardView o2) -> o1.getFreeInterestPeriod().intValue()
                        - o2.getFreeInterestPeriod().intValue())
                .collect(Collectors.toList());

        return list;
    }
}
