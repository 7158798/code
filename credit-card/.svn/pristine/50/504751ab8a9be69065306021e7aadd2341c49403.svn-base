package com.pay.card.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.pay.card.Constants;
import com.pay.card.dao.CreditSetDao;
import com.pay.card.model.CreditSet;
import com.pay.card.service.CreditSetService;

@Service
public class CreditSetServiceImpl implements CreditSetService {
    @Autowired
    private CreditSetDao creditSetDao;
    @Autowired
    @PersistenceContext
    private EntityManager entityManager;

    @Override
    public CreditSet findCreditSet(CreditSet creditSet) {
        creditSet = creditSetDao.findOne(getSpecification(creditSet));
        return creditSet;
    }

    /**
     * 分页查询提醒设置
     *
     * @param creditSet
     * @param page
     * @return
     */
    @Override
    public List<Map<String, Object>> findCreditSetList(CreditSet creditSet, Integer page) {
        StringBuffer sql = new StringBuffer("SELECT cs.user_id userId,cs.billday_reminder billdayReminder,");
        sql.append("cs.out_bill_reminder outBillReminder,cs.repayment_reminder repaymentReminder,");
        sql.append("cs.overdue_reminder overdueReminder,cui.customer_no customerNo");
        sql.append(" FROM credit_set cs LEFT JOIN credit_user_info cui on cui.id=cs.user_id");
        sql.append(" WHERE 1=1 LIMIT ?,?");

        Integer pend = page * Constants.PAGE_SIZE;
        Integer pstart = pend - Constants.PAGE_SIZE;
        Query query = entityManager.createNativeQuery(sql.toString());
        query.setParameter(1, pstart);
        query.setParameter(2, pend);
        // query.unwrap(SQLQuery.class).setResultTransformer(Transformers.aliasToBean(CreditSetResponseBean.class));
        List<Object[]> list = query.getResultList();
        List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();
        for (int i = 0; i < list.size(); i++) {
            Map<String, Object> tempMap = new HashMap<String, Object>();
            Object[] tempObject = list.get(i);
            tempMap.put("userId", tempObject[0]);
            tempMap.put("billdayReminder", tempObject[1]);
            tempMap.put("outBillReminder", tempObject[2]);
            tempMap.put("repaymentReminder", tempObject[3]);
            tempMap.put("overdueReminder", tempObject[4]);
            tempMap.put("customerNo", tempObject[5]);
            resultList.add(tempMap);
        }

        return resultList;
    }

    public Specification<CreditSet> getSpecification(CreditSet creditSet) {
        return new Specification<CreditSet>() {
            @Override
            public Predicate toPredicate(Root<CreditSet> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                List<Predicate> list = new ArrayList<Predicate>();

                // list.add(cb.equal(root.get("customerNo").as(String.class),
                // creditSet.getCustomerNo()));

                Predicate[] p = new Predicate[list.size()];
                return cb.and(list.toArray(p));
            }

        };
    }

    @Override
    public CreditSet saveOrUpdate(CreditSet creditSet) {

        creditSet = creditSetDao.saveAndFlush(creditSet);

        return creditSet;
    }

}
