
/**
* @Title: CardBillDayTask.java
* @Package com.pay.card.task
* @Description: TODO(用一句话描述该文件做什么)
* @author jing.jin
* @date 2017年12月13日
* @version V1.0
*/

package com.pay.card.task;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.pay.card.model.CreditBank;
import com.pay.card.model.CreditCard;
import com.pay.card.model.CreditUserCardRelation;
import com.pay.card.service.CreditCardService;
import com.pay.card.service.CreditUserCardRelationService;
import com.pay.card.utils.DateUtil;

/**
 * @ClassName: CardBillDayTask
 * @Description: 在账单日清除上次账单的数据
 * @author jing.jin
 * @date 2017年12月13日
 *
 */
@Component
public class CardBillDayTask {
    // 账单日
    private static final String CARD_BILL_DAY = "cardBillDay";
    private static final String LOCK_KEY = "lock";
    // 日志
    private static Logger logger = LoggerFactory.getLogger(CardBillDayTask.class);

    @Resource
    private RedisTemplate<String, String> redisTemplate;
    @Autowired
    private CreditCardService creditCardService;

    @Autowired
    private CreditUserCardRelationService creditUserCardRelationService;

    @Scheduled(cron = ("0 58 23 * * ?"))
    public void sendBillDayMessage() {
        boolean lock = false;
        try {

            lock = redisTemplate.opsForValue().setIfAbsent(CARD_BILL_DAY, LOCK_KEY);
            if (lock) {
                CreditUserCardRelation relation = new CreditUserCardRelation();
                // 如果在执行任务的过程中，程序突然挂了，为了避免程序因为中断而造成一直加锁的情况产生，20分钟后，key值失效，自动释放锁，
                redisTemplate.expire(CARD_BILL_DAY, 10, TimeUnit.MINUTES);
                // 账单日
                int day = DateUtil.getNextDay();
                CreditCard creditCard = new CreditCard();
                creditCard.setBillDay(String.valueOf(day));
                List<CreditCard> cardList = creditCardService.findCreditCardList(creditCard);

                cardList.forEach(card -> {
                    // 获取还款日
                    Date dueDate = card.getDueDate();

                    CreditBank bank = card.getBank();
                    LocalDate localDueDate = DateUtil.dateToLocalDate(dueDate);
                    // 固定日还款
                    if (bank.getRepaymentCycle() == 0) {
                        localDueDate = localDueDate.plusMonths(1);
                    } else {
                        // 手动添加卡
                        if (1 == card.getSource()) {
                            relation.setCardId(card.getId());

                            List<CreditUserCardRelation> relationList = creditUserCardRelationService
                                    .findCreditUserCardRelation(relation);
                            if (relationList != null && relationList.size() > 0) {
                                localDueDate = localDueDate.plusDays(relationList.get(0).getDueDay());
                            }
                        } else {
                            // 导入获取卡
                            localDueDate = localDueDate.plusDays(bank.getRepaymentCycle());
                        }

                    }
                    // 还款日
                    card.setDueDay(String.valueOf(localDueDate.getDayOfMonth()));
                    card.setDueDate(DateUtil.localDateToDate(localDueDate));
                    // 已还款
                    card.setRepayment(new BigDecimal(0));
                    // 账单金额
                    card.setBillAmount(new BigDecimal(-1));
                    // 预借现金额度
                    card.setCash(new BigDecimal(-1));
                    // 已消费金额
                    card.setConsumption(new BigDecimal(-1));
                    // 未出账单金额
                    card.setNotAccounted(new BigDecimal(-1));
                });

                creditCardService.bathUpdateCreditCard(cardList);
            }

        } catch (Exception e) {
            logger.error("{}", e);
        } finally {// 无论如何，最终都要释放锁
            if (lock) {// 如果获取了锁，则释放锁
                redisTemplate.delete(CARD_BILL_DAY);

            }
        }
    }

}
