package com.pay.card.api;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.client.methods.HttpGet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.pay.card.enums.ChannelEnum;
import com.pay.card.model.CreditUserInfo;
import com.pay.card.service.CreditUserInfoService;
import com.pay.card.utils.LocalCacheUtil;

@Api("信用卡入口")
@RestController
@RequestMapping("/api/v1/login")
public class CreditLoginController extends BaseController {

    @Autowired
    private CreditUserInfoService creditUserInfoService;

    @ApiOperation(value = "信用卡首页入口", httpMethod = HttpGet.METHOD_NAME)
    @ApiImplicitParams({
                    @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
                    @ApiImplicitParam(paramType = "query", name = "phoneNo", dataType = "String", required = true, value = "商户手机号", defaultValue = "123456789"),
                    @ApiImplicitParam(paramType = "query", name = "interfaceCode", dataType = "String", required = true, value = "渠道号", defaultValue = "1001") })
    @RequestMapping("toBillIndex")
    public
                    void CreditLogin(String phoneNo, String customerNo, String interfaceCode, HttpServletRequest req,
                                    HttpServletResponse response) {
        String key = "";
        try {
            if (ChannelEnum.MPOS.getCode().equals(interfaceCode)) {
                key = phoneNo + interfaceCode;
                Long userId = LocalCacheUtil.get(key);
                if (userId == null) {
                    saveCreditUserInfo(phoneNo, customerNo, interfaceCode, key);
                }
                toBillIndex(phoneNo, customerNo, req, response);
            } else if (ChannelEnum.POS.getCode().equals(interfaceCode)) {
                key = customerNo + interfaceCode;
                Long userId = LocalCacheUtil.get(key);
                if (userId == null) {
                    saveCreditUserInfo(phoneNo, customerNo, interfaceCode, key);
                }
                toBillIndex(phoneNo, customerNo, req, response);
            }
        } catch (Exception e) {
            logger.error("手机号为【" + phoneNo + "】跳转信用卡首页异常:{}", e);
        }

    }

    private void saveCreditUserInfo(String phoneNo, String customerNo, String interfaceCode, String key) {

        CreditUserInfo creditUserInfo = new CreditUserInfo();
        creditUserInfo.setCustomerNo(customerNo);
        creditUserInfo.setPhoneNo(phoneNo);
        creditUserInfo.setInterfaceCode(interfaceCode);
        creditUserInfo.setStatus(1);

        CreditUserInfo userInfo = creditUserInfoService.findCreditUserInfo(creditUserInfo);
        if (userInfo == null) {
            Long id = creditUserInfoService.saveCreditUserInfo(creditUserInfo);
            LocalCacheUtil.put(key, id);
        } else {
            LocalCacheUtil.put(key, userInfo.getId());
        }
    }

    private void toBillIndex(String phoneNo, String customerNo, HttpServletRequest req, HttpServletResponse response)
                    throws ServletException, IOException {
        RequestDispatcher rd = req.getRequestDispatcher("/api/v1/card/findCardIndex");
        req.setAttribute("customerNo", customerNo);
        req.setAttribute("phoneNo", phoneNo);
        rd.forward(req, response);
    }
}
