package com.pay.card.api;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Callable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.context.request.async.WebAsyncTask;

import com.pay.card.Constants;
import com.pay.card.enums.CodeEnum;
import com.pay.card.model.CreditBill;
import com.pay.card.model.CreditCard;
import com.pay.card.service.CreditBillService;
import com.pay.card.service.CreditCardService;
import com.pay.card.utils.JedisUtil;
import com.pay.card.view.CreditBillView;
import com.pay.card.view.CreditCardView;
import com.pay.card.view.JsonResultView;
import com.pay.card.web.context.CardBuildContext;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;

@Api("信用卡账单 API")
@RestController("/bill")
public class CreditBillController extends BaseController {
    @Autowired
    private RestTemplate restTemplate;

    @Autowired
    private CreditBillService creditBillService;
    @Autowired
    private CreditCardService creditCardService;

    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com") })

    @RequestMapping(value = "/findAnalysisStatus", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public WebAsyncTask<JsonResultView> findAnalysisStatus(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override

            public JsonResultView call() throws Exception {
                Object status = JedisUtil.hashGet(Constants.REDIS_CARDS, email);
                return new JsonResultView(String.valueOf(status));
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "cardId", dataType = "String", required = true, value = "信用卡id", defaultValue = "1") })

    @RequestMapping(value = "/findBillIndex", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public WebAsyncTask<JsonResultView> findBillIndex(Long cardId) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                CreditCard creditCard = new CreditCard();
                creditCard.setId(cardId);

                creditCard = creditCardService.findCreditCard(creditCard);
                CardBuildContext buildContext = apiHelper.getBuildContext();
                apiHelper.getModelBuilder().buildSingle(creditCard, buildContext);
                CreditCardView view = apiHelper.getViewMapper().map(creditCard, buildContext);
                List<CreditBill> billList = creditCard.getBillList();
                apiHelper.getModelBuilder().buildMulti(billList, buildContext);
                List<CreditBillView> billViewList = apiHelper.getViewMapper().map(billList,
                        buildContext);
                Map map = new HashMap();
                map.put("card", view);
                map.put("billList", billViewList);
                return new JsonResultView().setObject(map);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    // @ApiImplicitParams({
    // @ApiImplicitParam(paramType = "query", name = "cardId", dataType =
    // "String", required = true, value = "信用卡id", defaultValue = "1") })
    //
    // @RequestMapping(value = "/findBillList", method = RequestMethod.GET)
    // @SuppressWarnings("rawtypes")
    // public WebAsyncTask<JsonResultView> findBillList(Long cardId) {
    // Callable<JsonResultView> callable = new Callable<JsonResultView>() {
    // @Override
    // @SuppressWarnings("unchecked")
    // public JsonResultView call() throws Exception {
    // CreditBill creditBill = new CreditBill();
    // CreditCard card = new CreditCard();
    // card.setId(cardId);
    // creditBill.setCard(card);
    // List<CreditBill> billList =
    // creditBillService.findCreditBillList(creditBill);
    // return new JsonResultView().setObject(login);
    // }
    // };
    // return new WebAsyncTask<JsonResultView>(callable);
    // }

    @RequestMapping(value = "/findCardList", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public WebAsyncTask<JsonResultView> findCardList(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            @SuppressWarnings("unchecked")
            public JsonResultView call() throws Exception {
                Object login = JedisUtil.hashGet(Constants.REDIS_CARDS, email);
                return new JsonResultView().setObject(login);
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com") })

    @RequestMapping(value = "/findLoginStatus", method = RequestMethod.GET)
    @SuppressWarnings("rawtypes")
    public WebAsyncTask<JsonResultView> findLoginStatus(String email) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {
                Object status = JedisUtil.hashGet(Constants.REDIS_LOGGIN_STATUS, email);
                return new JsonResultView(String.valueOf(status));
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }

    @SuppressWarnings("rawtypes")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "query", name = "customerNo", dataType = "String", required = true, value = "商户编号", defaultValue = "123456789"),
            @ApiImplicitParam(paramType = "query", name = "email", dataType = "String", required = true, value = "邮箱用户名", defaultValue = "xxx@qq.com"),
            @ApiImplicitParam(paramType = "query", name = "password", dataType = "String", required = true, value = "邮箱密码", defaultValue = "123456") })

    @RequestMapping(value = "/importBill", method = RequestMethod.GET)
    public WebAsyncTask<JsonResultView> importBill(String customerNo, String email,
            String password) {
        Callable<JsonResultView> callable = new Callable<JsonResultView>() {
            @Override
            public JsonResultView call() throws Exception {
                // 设置初始状态
                JedisUtil.hashSet(Constants.REDIS_LOGGIN_STATUS, email,
                        CodeEnum.PROCESSING.getCode());
                // JedisUtil.hashSet(Constants.REDIS_CARDS, email,
                // CodeEnum.PROCESSING.getCode());
                JedisUtil.hashSet(Constants.REDIS_ANALYSIS_STATUS, email,
                        CodeEnum.PROCESSING.getCode());
                // Thread.sleep(300000); // 假设是一些长时间任务
                // String url =
                // "http://localhost:8080/credit-card/card/findCardList";
                // JSONArray json = restTemplate.getForEntity(url,
                // JSONArray.class).getBody();
                return new JsonResultView();
            }
        };
        return new WebAsyncTask<JsonResultView>(callable);
    }
}
